z_prompt1,z_prompt2,z_prompt3,references
"""Added runtime exception to prevent configuration of both zookeeper and etcd as registry center in YamlOrchestrationConfiguration""",feat: add validation to prevent dual registry center configuration in YamlOrchestrationConfiguration,Added validation to prevent both zookeeper and etcd configuration in getOrchestrationConfiguration method.,Refactor orchestration yaml configuration.
Update command line flag description in ServerAdmin class,feat(ServerAdmin): update option flag for password prompt in help messages,Updated command-line syntax for password prompt option in help messages,GT-360 corrected usage text
"Commit message: ""Remove padding calculation in font height and baseline calculation""",feat: remove padding dependency for font height in QMUIQQFaceView,Removed padding inclusion in fontHeight and mFirstBaseLine calculations in QMUIQQFaceView class,remove leading
"""Added support for I16 vector shuffling in LLVMShuffleVectorNode and BasicNodeFactory""","feat: add shuffle functionality for I16Vector in LLVM nodes

This commit introduces the ability to shuffle LLVMI16Vectors within the LLVMShuffleVectorNode class and updates the BasicNodeFactory class to create instances of the new LLVMShuffleI16VectorNode.",Added support for shuffling i16 vectors in LLVMShuffleVectorNode,add LLVMShuffleI16VectorNode
Fixed incorrect method call for setting 'TestOnReturn' property in both Basic and Tomcat DataSource Configurations.,fix: correct method call for setTestOnReturn in DataSourceConfiguration,Fixed incorrect method call for setting TestOnReturn in BasicDataSourceConfiguration and TomcatDataSourceConfiguration,"Fix DataSourceConfiguration isTestOnReturn()

Fix setTestOnReturn to use isTestOnReturn."
"""Refactored Package class to handle input files more efficiently. Now storing input files in a Map for quicker access and breaking up for-loops for readability. Also added null-check for labels before creating an InputFile. Improved handling of implicit test suites.""","feat: refactor package sorting and input file addition

Refactor package class to simplify rule sorting and input file addition. Created an independent method to handle creation of new InputFiles and updated handling of implicit test suites. Additionally, restructured sorting and addition of rules and InputFiles to ensure lists and maps are updated correctly.",Refactored code to dynamically create and add input files during rule processing in Package class,"Package perf: Avoid another copy and loop iteration. Instead, defer loop iteration over the presumably smaller set of new input files and implicit test suites.

RELNOTES: None
PiperOrigin-RevId: 248589531"
"""Implemented IME interactions support in EventFiringWebDriver""",feat: Update EventFiringWebDriver to support IME interactions,Updated IME handler to support IME interactions,"Pass Options.ime() through to the wrapped driver.

It looks like the UnsupportedOperationException was added to every
implementing class of WebDriver when IME support was originally
introduced (62c3753fafe6c665c587734dc9c86a8d1ed1ecf4), but there doesn't
seem to be any reason why this shouldn't just delegate to the wrapped
driver."
"""Refactor method name from 'fizzbuzz' to 'fizzBuzz' for clarity and consistency in naming convention""",feat: Rename fizzbuzz method to fizzBuzz in FizzBuzz class,Renamed fizzbuzz method to fizzBuzz in FizzBuzz class,Better naming convention
"""Replaced EconomicSet with ArrayList for unmarkedMultiGuards in GraphUtil and removed unnecessary break statement""","feat: change type of unmarkedMultiGuards to ArrayList in GraphUtil

Switch the data type of 'unmarkedMultiGuards' from EconomicSet to ArrayList for improved performance in the GraphUtil class. Also eliminate an unnecessary 'break' statement for cleaner code.",Refactor EconomicSet to ArrayList and remove unnecessary break statement in GraphUtil,Use a list to collect unmarked MultiGuardNodes
"""Updated field references and added COPY_TO feature in ElasticsearchMappings""",feat(ElasticsearchMappings): update field paths and add copy_to option in Elasticsearch mapping configuration,Updated Elasticsearch mappings for 'Influencer' field,"Add Influencer.influencer_field_value to custom all field (elastic/elasticsearch#624)

Original commit: elastic/x-pack-elasticsearch@5aa98d84dcdefbf26f1aaf003f28e6a27f7dfb5c"
"""Added new constant for version V_0_18_6 and its reference in the switch case statement""",feat: Add Version V_0_18_6 to Version class,Added new version V_0_18_6 to Version class,add 0.18.6
"""Enhanced ExperimentalObjcLibrary class by adding import statements for ObjcProvider.DEFINE and ObjcCommon.ResourceAttributes. Also, modified some methods to include additional attributes like defines, deps, runtime_deps and setIntermediateArtifacts.""","feat: update experimental objc library

The ExperimentalObjcLibrary class has been updated to import new dependencies, enable the use of define attributes, and add a new ObjcProvider. Additional ruleContext attributes (like 'defines', 'deps', 'runtime_deps') have been added and a new method for creating an ObjcCommon instance was introduced.",Added defines support and updated dependency handling in ExperimentalObjcLibrary,"Add defines to experimental_objc_library.

--
MOS_MIGRATED_REVID=130424806"
"""Removed Version 2.4.0 from Version class""",feat: Remove V_2_4_0 version references in Version class,Removed version V_2_4_0 references from Version class,"Revert ""Added version 2.4.0 to Version""

This reverts commit 8c4aa75b0cc839d4c1ef77d79828f02c38d70199."
"""Updated method call to get full qualified procedure signature in PostgreCommandGrantPrivilege class""",feat: update method to get PostgreProcedure object name in PostgreCommandGrantPrivilege class,Updated method to fetch full qualified signature of PostgreProcedure,#10501 procedure/function with arguments names changed
"""Updated the RangeQueryBuilderTest to use UTC timezone for date time calculation""",feat: update RangeQueryBuilderTest to use UTC time zone in date calculations,Updated date calculations in RangeQueryBuilderTest to use UTC timezone,Tests: Using UTC time zone in RangeQueryBuilderTest to make forbidden apis checker happy
"""Updated boolean parsing method from valueOf to parseBoolean in both DefaultHomeFinder and GraalVMLocator classes""",feat: convert system variable string to boolean using parseBoolean method,Replace Boolean.valueOf with Boolean.parseBoolean for environment variables,Fix boxing warning
"""Added a debug option to display full current path in the Launcher class""",feat(Launcher): add option to display full current path in debug mode,Added option to display full current path in Launcher,"added a debug option to show the full path of the current directory.


git-svn-id: https://hudson.dev.java.net/svn/hudson/trunk/hudson/main@1606 71c3de6d-444a-0410-be80-ed276b4c234a"
"Commit messages:

1. Refactored `getDictionaryValues` function: improved code readability and added `Nullable` annotation to `preceedingKeys` parameter.
2. Removed redundant check of key pattern in `JDBCTable` where key pattern preparation was not necessary.
3. Modified logic involving key pattern and `searchInKeys` conditions in `JDBCTable`.
4. Improved handling for `bindValueObject` in `searchInKeys` conditions for `dbStat`.
5. Adjusted logic involving key pattern in `searchInDesc` conditions for `dbStat`.
6. In `GenericFilterValueEdit`, replaced hard-coded empty list input with a new boolean variable `isCheckedTable` in `loadMultiValueList`.
7. Refactored `mergeResultsWithData` in `GenericFilterValueEdit`: made it a separate function in the subclass for better management.
8. Updated `populateValues` to incorporate the new `mergeResultsWithData` function in `GenericFilterValueEdit`.","feat: Update JDBCTable and GenericFilterValueEdit classes

- Refactor 'getDictionaryValues' method for better parameter clarity
- Update keyPattern conditions and improve data handling
- Change 'loadMultiValueList' method to support mergeResultsWithData flag
- Allow DBDLabelValuePair data merging with results
- Update 'populateValues' method to incorporate the 'mergeResultsWithData' property",Refactor JDBCTable and GenericFilterValueEdit classes: update method signatures and improve string handling logic,#6367 Columns filter fix (search by numbers and strings)
"- Added StringUtils class to help with string manipulations
- Refactor MockHttpServletRequest to no longer replace null method and requestURI with empty strings
- Modified getRequestURL method to append requestURI only if it's a non-empty string
- Added test case in MockHttpServletRequestTests to validate getRequestURL behavior with null requestURI","feat: update null handling of properties in MockHttpServletRequest

The HttpServletRequest method and requestURI properties now accept null values. Imported StringUtils for additional functionality. Adjusted getRequestURL() to only append non-empty requestURI. Provided new test to validate changes.",Added StringUtils import and modified null checks for method and requestURI in MockHttpServletRequest,"Exclude null requestURI in MHSR.getRequestURL()

This commit undoes the changes made in ec5d81e78e and ensures that the
getRequestURL() method in MockHttpServletRequest does not include the
String ""null"" for a null requestURI by first checking if the requestURI
contains text before including it in the composed URL.

Issue: SPR-10643"
"1. Moved HotSpotGraphBuilderPluginsProvider to 'com.oracle.graal.hotspot.meta' package and added necessary imports.
2. Adjusted metaAccess retrieval in 'apply' method of InvocationPlugin for 'getClass' in Object.class.
3. Added registration for 'getValue' in StableOptionValue.class.
4. Changed visibility of HubGetClassNode constructor from 'protected' to 'public'.","feat: Update package in HotSpotGraphBuilderPluginsProvider and enhance plugin registration

The changes include modifying the package in HotSpotGraphBuilderPluginsProvider from 'com.oracle.graal.hotspot.replacements' to 'com.oracle.graal.hotspot.meta'. Added import for 'com.oracle.graal.hotspot.replacements' and 'com.oracle.graal.options'. In 'registerPlugins' method, adjusted the object creation of ConstantNode, and added new plugin registration for StableOptionValue.class. Also, made the constructor of HubGetClassNode to be public.",Updated package name in HotSpotGraphBuilderPluginsProvider and added new plugin for StableOptionValue. Made HubGetClassNode constructor public.,added graph builder plugin for StableOptionValue.getValue()
"""Updated return type of getPrefixes method in FileExtension class""",fix: change wildcard iterator to String iterator in getPrefixes method,Changed return type in getPrefixes method from Iterator<?> to Iterator<String>,Allow compilation with the java 10 javac
"""Refactor assertEquals to assertCollectionEqualValues in ValueAssert class""",refactor: simplify assertions in ValueAssert class,Refactored assertEquals to use assertCollectionEqualValues in ValueAssert class,Also use value comparison for maps.
"Commit Message:
""Updated JsonElementWriter to check for JsonNull before adding to JsonObject. Added associated testing for serialize nulls being true or false""","feat: add null serialization handling in JsonElementWriter

Implemented condition to check if value is not null or should be serialized when it's null in JsonElementWriter. Extended JsonElementWriterTest to cover scenarios when serialization of nulls is set to true and false.",Added null serialization check in JsonElementWriter and corresponding tests,Don't serialize nulls in JsonElementWriter if setSerializeNulls(false)
"""Added a third UDPBroadcastThread to the testMulticast test function and ensured it's ready before proceedings and interrupted at the end of the function. Also, replaced 'hudson' with 'jenkins' as argument for UDPBroadcastThread constructor.""","feat: Add additional UDPBroadcastThread in Multicast test 

This commit introduces a third UDPBroadcastThread for testing multiple replies with multicast based clients. It further ensures each thread is appropriately interrupted to maintain efficient resource usage. Replaces 'hudson' with 'jenkins' inside the UDPBroadcastThread instantiation.",Updated UDPBroadcastThreadTest to include additional test instance,"Maybe this test is flaky because it doesn't wait for
jenkins.udpBroadcastThread to become ready?"
"Commit Message:

""Updated JavaCompilationHelper and JavaHeaderCompileActionBuilder to include Javabase Inputs and Javac Jar

In JavaCompilationHelper, added methods to set JavaBaseInputs and JavacJar in the builder.
In JavaHeaderCompileActionBuilder, added methods to set JavaBaseInputs and JavacJar. Replaced instances of getHostJavabaseInputs and prerequisiteArtifact calling with javabaseInputs and javacJar respectively. Ensured checks for not null input for both javabase inputs and javac Jar.""","feat: add new methods to set javabase inputs and javac jar in Java compilation builders

This commit introduces new methods in JavaCompilationHelper and JavaHeaderCompileActionBuilder to set javabase inputs and javac jar. This change allows to specifically set the required javabase inputs and javac jar instead of obtaining them from the rule context. Old implementations which were obtaining these details from the rule context have been removed.",Set Java base inputs and Javac jar in JavaCompilationHelper and JavaHeaderCompileActionBuilder,"Update header compilation to handle implicit attribute suffixes

--
MOS_MIGRATED_REVID=117153381"
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
,,,
"Commit messages:
1) Updated copyright year in MultiValueMap file from 2018 to 2019
2) Added new ""addIfAbsent"" method to MultiValueMap interface
3) Implemented test cases for ""addIfAbsent"" method in LinkedMultiValueMapTests","feat: update copyright year and add addIfAbsent method in MultiValueMap

This commit updates the copyright year in MultiValueMap and introduces a new method, addIfAbsent. Tests for this new method have also been added to LinkedMultiValueMapTests.",Updated copyright year and added addIfAbsent method to MultiValueMap with corresponding tests,
"""Added EconomicMap to store ExternalLibrary objects. Modified exceptions in Runner class to use this new map for better error reporting.""","feat: improve error handling for LLVMLinkerException

Added a new map for storing ExternalLibrary instances and enhanced the LLVMLinkerException handling to fetch the library from the created map. This provides more detailed error information when symbols are not found in the library or the library itself is not found.",Added mapping for ExternalLibrary objects to improve exception message clarity in LLVMLinkerException,
"""Remove unnecessary connection closure and resume operations in Http1xClientConnection""",feat(Http1xClientConnection): remove code lines on connection resume and keep-alive settings,Removed unnecessary connection close and resume operations in Http1xClientConnection,
Fixed typo in method name from 'isDefualtSchema' to 'isDefaultSchema',fix: corrected typos in method name in DownloadFromUrlInstaller class,"Fixed typo in method name from ""isDefualtSchema"" to ""isDefaultSchema""",
"Commit messages:

1. Enhanced logic in ExecutionGraph for handling failed recovery states and adding unique vertex IDs
2. Renamed RecoveryThread for improved understanding and refined logic for recovering from failed vertices
3. Abstracted out recovery mechanism into a separate function for better organization and readability
4. Modified logic in recovery process to account for errors and improve stability
5. Return statements altered for the recover() function for more precise control flow
6. Refined logging messages for better traceability of the recovery process.","feat: Improve recovery process in execution graph

This commit enhances the system's recovery process when an execution state failure occurs. When an execution state is flagged as 'recovering', the system now checks if the recovering set is empty before proceeding. If it's empty, the inner jobStatus is set to 'running'. Also, removed the automatic addition of vertices to the recovering set if jobStatus is 'recovering'. Now, it checks if the newExecutionState is 'failed' and the jobStatus is 'recovering' before moving on. 

In the RecoveryThread, introduced a while loop that iterates until all failed vertices have been recovered. Additionally, error handling is improved with execution state changed to 'failed' whenever an error is caught. The recovery thread is also given a name in its constructor for better debugging.

Additionally, in the recovery method, return type 'boolean' has been introduced. This method now returns 'false' whenever an error is caught. Also, after successfully replaying all checkpoints for a failed vertex, execution state is changed to 'rerunning', signifying the successful recovery of a failed vertex.

If the replay of checkpoints results in an error, then execution state is set to 'failed' to indicate an issue with the recovery process.",Improved recovery process in ExecutionGraph and RecoveryThread,
"""Added Nullable annotation to packageProgress in PackageFunction class""",feat: add nullable annotation to packageProgress in PackageFunction class,Marked packageProgress as Nullable in PackageFunction class,
"""Refactored prepareStatementParameters method in SQLQueryJob class to improve parameter handling""","feat: simplify SQL query parameter preparation and usage

Refactored the SQL query parameter preparation process to streamline the code. Removed the unnecessary null return, and set the prepareStatementParameters method to return a boolean. Updated all method calls accordingly. Additionally, adjusted the handling of DBCStatement preparation to default to DBCStatementType.QUERY, removing the conditional check based on the presence of query parameters.","""Refactor prepareStatementParameters method in SQLQueryJob class""",
"- Updated BitmapFontCache.java, removed unnecessary import and made adjustments to improve code readability.
- Improved BitmapFontTest to clean up code and enhance clarity in test cases.
- Refactored code to ensure readability, maintainability and optimization.
- Removed unused imports and cleaned multi-line if statements.
- Changed comment lines to make them more insightful.
- Fixed excessive markup operation in bitmap font testing.","feat: improve BitmapFontCache and BitmapFontTest files

Removed unused imports, cleaned up code format, enhanced comment explanation and simplified logic in BitmapFontCache class. Minor changes in BitmapFontTest include improved comment explanations and format fixes.",Refactor and cleanup BitmapFontCache and BitmapFontTest classes,
"Commit Message:
""Refactor to use runtime.getNodeFactory() instead of runtime.getContext().getLanguage().getNodeFactory(). Simplified node creation process.""",refactor: replace getContext().getLanguage() with getNodeFactory() for brevity,Refactor code to use getNodeFactory() directly from runtime instead of accessing it through getContext().getLanguage(),
"Commit messages:

1) Added mute and unmute functionality in BasePlayer.
2) Added mute button interface in MainVideoPlayer.
3) Implemented mute and unmute feature in MainVideoPlayer, and updated mute button color.","feat: add mute/unmute functionality to video player

The mute/unmute functionality has been introduced to the video player. The `onMuteUnmuteButtonClicked()` method has been added to the `BasePlayer` class while a mute button and corresponding event listener in the `MainVideoPlayer` class have been established. Moreover, a method to set the icon of the mute button depending on mute status has been developed.",Added mute/unmute functionality for video player,
"""Added getStackTrace method to encapsulate direct use of stack trace retrieval; updated Invariants constructor to use this method instead of directly accessing thread.getStackTrace()""",feat(DebugContext): add getStackTrace method to encapsulate stack trace retrieval,Added getStackTrace method for cleaner code in DebugContext,
"Commit messages:
1. Added '@Nullable' annotation to 'getByName' method in TagService
2. Imported 'ServiceUtils' in 'CategoryServiceImpl' class
3. Replaced parent ID check with 'ServiceUtils.isEmptyId' method in 'CategoryServiceImpl' class",feat: Add nullability annotation to TagService and improve parentId check in CategoryServiceImpl,"Updated tag service to return nullable, refactored parent ID check in CategoryService",
"Commit message: 
Updated RouterFunctions class to use HttpWebHandlerAdapter instead of HttpHandler. Included additional import statements for WebHandler and WebHttpHandlerBuilder. Additional comments were also added for better code understanding. The return type of toHttpHandler methods updated to HttpWebHandlerAdapter for better compatibility.","feat(RouterFunctions): change HttpHandler to HttpWebHandlerAdapter and add WebHandler import

Change the return type of the toHttpHandler methods from HttpHandler to HttpWebHandlerAdapter. This change is consistent with the new import of WebHttpHandlerBuilder and WebHandler. This allows for additional filter and exception handler registration. Adjusted related comments accordingly.",Refactor RouterFunctions to return HttpWebHandlerAdapter and add WebHandler imports,
"""Added unit test for hoisting behaviour in NestedSet implementation""",feat: add unit test for singleton creation in NestedSetImplTest,Added new test method 'hoistingKeepsSetSmall' to verify efficient set construction in NestedSetImplTest.,
"""Added the OrchestrationType parameter to the getOrchestrationFacade() initialization method in the OrchestrationMasterSlaveDataSource class""",feat: add orchestration type to MasteSlaveDataSource initialization,Added OrchestrationType.MASTER_SLAVE to init method in OrchestrationMasterSlaveDataSource class,
"""Refactored setInBitmap method to avoid short circuiting on certain devices""","feat: modify SDK checks in Downsampler class

Separated conditional checks in setInBitmap method to avoid short circuiting, which was causing issues on some devices.",Refactored conditionals in setInBitmap to fix short circuiting issue on some devices,
Added CRC32 check to CompressedXContent and updated CompressedXContent's constructor to handle serialization of ToXContent instances. Simplified the refreshSource method in DocumentMapper by using the new constructor. Removed unnecessary imports.,"feat: add CRC32 check to CompressedXContent and refactoring

- Added CRC32 check to CompressedXContent class for data integrity verification.
- Refactored CompressedXContent creation to accept ToXContent instance.
- Removed direct usage of XContentFactory from DocumentMapper and replaced with the new CompressedXContent creation method.
- Simplified hashCode and equals method using CRC32.
- Adjusted related code in other classes to handle the changes.",Added CRC32 checksum and refactored CompressedXContent for better consistency and compression handling. Updated DocumentMapper to use new CompressedXContent constructor.,
"- Added a new FeatureFlag for sending viewed receipts.
- Updated SendViewedReceiptJob to consider the new FeatureFlag for deciding whether to send viewed receipts or not.",feat: add feature flag to control sending of viewed receipts,Added feature flag for sending viewed receipts,
Fixed typo in variable name from 'sessiondId' to 'sessionId',fix: correct typo in variable name in SimpleBrokerMessageHandler,Fixed typo in variable name 'sessiondId' to 'sessionId',
"""Refactored TaskManager class by extracting method for registering cancellable tasks""","refactor: simplify task registration process in TaskManager

Extracted the process of registering a CancellableTask into a separate method 'registerCancellableTask' to reduce code complexity. This improves readability and maintainability.",Refactored task registration logic into separate method,
"Based on the provided code diffs, here are some recommended commit messages:

1. Refactor `AnnotationTypeMappingsTests` for better readability
```
Refactor tests in AnnotationTypeMappingsTests for cleaner inline instantiation

- Simplify the instantiation of AnnotationTypeMappings objects by making them inline, improving the readability of the test methods.
- Update assertions to be on the same line as the method calls where possible, further enhancing code clarity.
```

2. Consolidate test methods for `AnnotationTypeMappings` usage
```
Consolidate creation of AnnotationTypeMappings in tests

- Consolidate object creation by using single-line instantiation of AnnotationTypeMappings for conciseness.
- Remove unnecessary line breaks within assertion statements to streamline test methods.
```

3. Streamline `AnnotationTypeMappings` instantiation and usage in tests
```
Streamline AnnotationTypeMappings instantiation in tests for clarity

- Modify the annotation mappings instantiation calls to be single-lined for better code legibility.
- Adjust multiline assertion statements to single lines to align with the new instantiation format.
```

4. Modify `AnnotationTypeMappingsTests` to enhance maintainability
```
Enhance maintainability by refactoring AnnotationTypeMappingsTests

- Refactor AnnotationTypeMappingsTests to use more compact and maintainable inline initialization.
- Eliminate extra whitespace and unnecessary line continuations to clean up test methods.
```

Each commit message provides a brief description of the changes and the intent behind them. These messages help to convey the purpose of the commits and make them easier for teammates to understand when reading the commit history.","```
refactor(tests): simplify AnnotationTypeMappings test declarations

Simplified the method call invocations and assertions in AnnotationTypeMappingsTests by removing unnecessary line breaks and improving formatting for better readability and maintainability.
```",Refactor AnnotationTypeMappingsTests to remove extra line breaks and improve code readability,
"Added fallback decoding mechanism to ArtDecoder

- Added import for SimpleBitmapReleaser to handle bitmap releases.
- Implemented a try-catch block to handle IllegalArgumentException during bitmap decoding.
- In case of invalid Bitmap options, added logic to reset the input stream and decode the bitmap without custom options.
- Ensured that the naïvely decoded bitmap is also wrapped with CloseableReference and SimpleBitmapReleaser for proper memory management.
- Included logic to rethrow the original IllegalArgumentException after attempting the fallback decoding.
- Retained the original RuntimeException handling logic.
- Enhanced the robustness of the ArtDecoder to gracefully handle scenarios where bitmap options might be invalid.","```
fix(ArtDecoder): handle IllegalArgumentException during bitmap decode with fallback

Include a fallback decoding path that attempts to decode the bitmap without options if
the initial decode with options throws an IllegalArgumentException. This change protects
against invalid Bitmap options and ensures that decoding continues with a simpler method,
avoiding the crash. Additionally, the fallback implementation resets the stream and provides
error handling to rethrow the original exception if the naive decoding fails.
```",Handle IllegalArgumentException by attempting naive bitmap decoding in ArtDecoder,
"Refactor iteration over search response in AlertsStore

""Changed for-loop to while-loop for consistency and readability when iterating over search response hits in AlertsStore.""","```
refactor(alerts-store): replace for-loop with while-loop for clarity in scroll processing
```",Refactor loop condition in AlertsStore from for to while for clarity,
"Refactor XMLMapperBuilder to simplify conditional block for mapper registration

The commit message captures the nature of the change by indicating that a refactoring has taken place, which simplifies the conditional logic used when registering a mapper in the XMLMapperBuilder class.","```
refactor: simplify conditional logic in XMLMapperBuilder
```",Refactor XMLMapperBuilder to simplify conditional logic when adding new mappers,
"Commit messages should reflect the changes made, provide context to why changes are made, and should be concise but descriptive. Here are commit messages based on the code diffs:

**Commit for `RunApp` changes:**
```
Refactor 'if-else' block and optimize resource duplication removal

- Reformat 'if-else' block according to code style guidelines.
- Replace specific logback.xml removal with generic deletion logic to remove any duplicated resource files that may exist in the output directory.
```

**Commit for `RunMojo` changes:**
```
Enhance resource handling and clean-up logic in Maven plugin

- Import FileUtils class to use directory deletion utility methods.
- Modify addResources method to delete duplicated resource directories as well as files, improving upon the previous logback.xml-specific removal code.
- Include IOException in the catch block for addResources, ensuring proper error handling when resources are being added.
- Update comment to reflect the change in resource handling behavior.
```

These commits describe the key changes and the reason behind the amendments. It's important to note that commit messages should be understood by other developers who might be looking at the changes, and therefore clarity is essential.","```
refactor: improve resource duplication handling and code formatting

- Replace specific logback.xml deletion logic with a general approach to removing duplicate resources from the target directory for both class and resource files, across both RunApp and RunMojo classes.
- Correct code block formatting by adhering to the Java coding conventions for ""else"" statements.
- Handle IOException when building the classpath in the RunMojo class, ensuring proper error reporting.
```","Refactor resource cleanup logic and handle IOException in Maven plugin

- Consolidate resource cleanup logic in RunApp and RunMojo classes.
- Remove special case handling of `logback.xml` and generalize duplicate removal mechanism.
- Handle `IOException` during classpath construction in RunMojo.
- Minor code style fixes (e.g., `else` placement).",
"Commit message for Hudson_new.java:
```
Add User.reload call in Hudson upon initialization

A call to User.reload has been added to ensure user configurations are reloaded as part of the Hudson initialization sequence. This helps maintain consistency in user data after the Hudson instance starts.
```

Commit message for User_new.java:
```
Implement User.reload method to refresh user configurations

A new method, reload, has been introduced in the User class that iterates over existing users and reloads their configurations from disk. This feature aids in keeping user data up-to-date without requiring a system restart.
```","```
feat(Hudson, User): add user configuration reload functionality

Implemented a new static method `reload` in User class to reload user configurations from disk. Integrated this method within Hudson class to trigger user configuration reload during the system load process.
```",Add User.reload method and invoke on system initialization,
Add null-check for ClassLoader in TruffleLocator loadClass method,"feat(TruffleLocator): skip null ClassLoaders during class loading

Avoid potential NullPointerException by checking for null before attempting to use a ClassLoader in the loadClass method.",Handle null ClassLoader in TruffleLocator's loadClass method,
"""Add synchronization block to lookupType method to ensure thread safety""","```
fix: synchronize lookupType method to ensure thread safety
```",Add thread-safety for type lookup in HotSpotConstantPool,
"```
Refactor STL label references for Bazel C++ rule classes

- Simplify the reference to the STL label by removing the redundant constant prefix from env.getLabel calls related to the STL.
- Ensure consistent usage of STL label across the BazelCppRuleClasses class.
```

(Note: The commit message should reflect the actual changes made to the code. In this case, it appears that the redundant prefix Constants.TOOLS_REPOSITORY has been removed from the STL label paths.)","```
refactor: simplify STL label references in BazelCppRuleClasses

Removed redundant TOOLS_REPOSITORY constant from STL label references in BazelCppRuleClasses, simplifying the codebase and avoiding unnecessary namespace complexity.
```",Refactor C++ rule classes to use relative label for STL in Bazel configuration.,
Enhanced exception message to include file information when an `IOException2` is thrown due to a `StreamException`.,fix(xml): enhance IOException2 with descriptive message on read failure,Improve exception messaging on XML read errors,
"```
Add SuppressWarnings annotation to stop0, suspend0, and resume0 methods

- The `stop0`, `suspend0`, and `resume0` methods in `Target_java_lang_Thread` class have been annotated with `@SuppressWarnings({""static-method""})` to suppress warnings regarding the static method usage that is not being accessed statically.
- Note that no functional changes have been made, this update is to ensure cleaner compilation by avoiding unnecessary warnings.
```","```
feat: suppress static-method warnings in thread substitution methods

Add SuppressWarnings annotations to stop0, suspend0, and resume0 methods in Target_java_lang_Thread to suppress static-method warnings.
```","Add SuppressWarnings annotation to stop0, suspend0, and resume0 methods",
"Commit Message 1: 
```
Added CopyOnWriteArrayList to track asynchronous responses in tests

- Added import for java.util.concurrent.CopyOnWriteArrayList
- Implemented responses list using CopyOnWriteArrayList to efficiently handle potential concurrent modifications
```

Commit Message 2:
```
Increase range of randomised asynchronous request counts

- Adjusted the `numRequests` random range from 2-10 to 5-20 for broader test coverage in `testAsyncRequests` method
```

Commit Message 3:
```
Refactor testAsyncRequests method to improve response handling

- Removed `assertThat` usage with `instanceOf` in favor of a custom response assertion logic
- Added `TestResponse` inner class to encapsulate response details
- Responses are now collected and their assertions are done post-async operation execution
- Assertions on responses check both method type and status code
- Removed inline `assertResponse` method, moving its logic to `TestResponse.getResponse()`
```","```
feat: expand async test range and improve response handling in RestClientIntegTests

Increase the range of randomly generated requests in the testAsyncRequests method from 2-10 to 5-20. Replace direct assertions with TestResponse class to collect and assert responses, ensuring thread-safety with CopyOnWriteArrayList. Remove unused instanceOf import.
```",Increase testAsyncRequests numRequests range and improve tracking with CopyOnWriteArrayList,
"Refactor: Remove redundant usage of 'this' in setVisibilityCallback method

- Simplified the reference to mVisibilityCallback within the setVisibilityCallback method by removing the redundant 'this' keyword. This change adheres to coding standards that advocate for less verbosity when the context is clear, improving code readability. No functional changes.",fix: remove unnecessary 'this' qualifier from visibilityCallback assignment,Remove unnecessary 'this' qualifier from visibilityCallback assignment,
"Commit message:
```
Set Java home directory in Maven build request

This commit adds a line to set the Java home directory in the Maven build request by retrieving the ""java.home"" system property. This ensures the Maven build process utilizes the correct JVM environment as specified by the system.
```",feat: set Java home directory in Maven build request,Set JavaHome in Maven build request from system property,
"Commit message:
```
Refactor AMD64Arithmetic to use crb.asIntConst for immediate value handling

Modify the IMUL and LMUL operations to handle immediate values using the crb.asIntConst method instead of directly accessing y.asInt. This change ensures consistency with the way we obtain constant values throughout the AMD64Arithmetic code.
```","fix(AMD64Arithmetic): use crb.asIntConst for immediate value in multiplication operations

- Replace direct `y.asInt()` calls with `crb.asIntConst(y)` to ensure correct constant handling in `IMUL` and `LMUL` operations.",Refactor multiplication constant handling in AMD64Arithmetic,
"Based on the changes provided in the two diffs above, here are suitable commit messages:

For `DefaultPlatformManager` changes:

```
Remove unnecessary module directory classpath addition

- Eliminate redundant logic to add module directory to the classpath if found.
- This simplifies the classpath assembly by directly deploying the module from mod.json.
- The associated TODO comment questioning the necessity of this step has also been addressed.
```

For `Redeployer` changes:

```
Increase redeploy GRACE_PERIOD from 500 to 1000 ms

- Adjusting GRACE_PERIOD constant to allow for a longer deployment grace window.
- This aims to improve the reliability of module redeployment under varying system load conditions.
```

These commit messages concisely describe what has been changed and, where applicable, why the change was made.","```
refactor: remove unnecessary module dir inclusion and improve classpath parsing

Removed the addition of the module directory to the classpath, which was marked by a TODO as potentially unnecessary. Improved the classpath parsing logic to skip blank lines and comments, ensuring only valid paths are added to the classpath. Also adjusted the GRACE_PERIOD constant in Redeployer from 500 to 1000 to accommodate longer start-up times.
```","Refactor module loading and adjust grace period in Redeployer

- Remove unnecessary addition of module directory to classpath in DefaultPlatformManager.
- Simplify processing of classpath entries from configuration file to skip comments and blank lines.
- Increase Redeployer's GRACE_PERIOD constant from 500 to 1000 milliseconds.",
"Here are the commit messages for the code diffs provided:

1. **Whitespace Cleanup**
   ```
   Removed extra space in server.enqueue method call for varyAsterisk test
   ```

2. **Code Style Consistency**
   ```
   Standardized indentation for assertNotCached call in doNotCachePartialResponse test
   ```

3. **New Test Case Addition**
   ```
   Added new test case conditionalMissUpdatesCache to address issue #1712
   ```

When committing such changes, it would be helpful to also mention the reason behind the change in the body of the commit message (if it's not self-evident) or if it's related to a specific issue or task in the project's issue tracker, include a reference to that issue.","```
feat(CacheTest): add test for conditional cache miss update

Add a unit test to verify cache behavior on conditional misses, responding to issue #1712.

- Enqueue new responses with varying ETags.
- Verify that subsequent requests correctly update the cache.
- Adjust formatting for code consistency in existing test methods.
```",Refactor cache tests and add test for conditional miss updating cache,
"Commit message:

```
Fixed incorrect reference in setOriginBasedPosition method

- Corrected the y-coordinate calculation using originY instead of originX
- Ensures the sprite is positioned correctly when setOriginBasedPosition is called
```",fix(sprite): correct setOriginBasedPosition to use originY for y-coordinate,Fix incorrect originY reference in setOriginBasedPosition method,
"Based on the code differences, here are the commit messages for the changes made to each file:

**Repackager_new.java:**

Commit message:
```
Update copyright years and handle META-INF/aop.xml during repackaging

- Update the copyright year from 2012-2016 to 2012-2017.
- Modify the repackaging conditions to exclude META-INF/aop.xml from being treated as a common META-INF file, allowing it to be moved to BOOT-INF/classes/META-INF/ during the repackaging process.
```

**RepackagerTests_new.java:**

Commit message:
```
Extend tests to include repackaging of META-INF/aop.xml

- Update copyright year from 2012-2016 to 2012-2017.
- Add test method `metaInfAopXmlIsMovedBeneathBootInfClassesWhenRepackaged` to ensure META-INF/aop.xml is correctly relocated beneath BOOT-INF/classes/ in the jar structure when repackaged.
```

These commit messages summarize the changes by highlighting the copyright update, what was modified in the repackaging process, and the extension of the test suite to cover the new functionality.","```
fix: update copyright year and handle aop.xml file during repackaging

- Update the copyright year in both Repackager and RepackagerTests files to 2017.
- Modify Repackager to exclude ""META-INF/aop.xml"" from ignored entries.
- Add test case to ensure ""META-INF/aop.xml"" is correctly moved beneath ""BOOT-INF/classes"" during repackaging.
```",Update copyright year and exclude META-INF/aop.xml from Repackager filters; add corresponding test.,
"Commit Message:

""Remove unused generateTotalAvailableResourceProfile method from TaskExecutorProcessUtils""

Explanation:

The commit removes the `generateTotalAvailableResourceProfile` method from the `TaskExecutorProcessUtils` class, which suggests that the method was likely no longer used or necessary within the codebase. The message is concise, describing what was done (removal) and where (from the TaskExecutorProcessUtils class), and also hints at the reason by suggesting the method was unused.","```
refactor: remove generateTotalAvailableResourceProfile from TaskExecutorProcessUtils

Removed the unused generateTotalAvailableResourceProfile method from TaskExecutorProcessUtils class to streamline resource profile generation.
```",Remove generateTotalAvailableResourceProfile method from TaskExecutorProcessUtils,
"Based on the code diff provided, here are potential commit messages:

1. Removed copyright notice from `LocalTimeProtocol.java`.

   ```
   Remove Apache License header from LocalTimeProtocol.java
   ```

2. Updated package references from `org.jboss.netty.example.localtime` to `io.netty.example.localtime`.

   ```
   Refactoring: Update package references to align with io.netty namespace
   ```

3. Updated various descriptor references to the correct package namespace.

   ```
   Update descriptor references to match new io.netty package structure
   ```

When writing commit messages, it is important to be clear and concise, explaining what was changed and why, without going into unnecessary detail. Each of the messages above achieves this, providing a clear explanation of the changes without being overly verbose.","```
refactor: update package path in LocalTimeProtocol protobuf descriptor

Change the internal static references from org.jboss.netty.example.localtime to io.netty.example.localtime. Remove the old copyright notice.
```",Refactor package references from `org.jboss.netty.example.localtime` to `io.netty.example.localtime`.,
"Commit message options for the changes made in the `StatementExecutorTest` class:

1. ""Enhance mock connection handling in StatementExecutorTest""
2. ""Use detailed mock connection and metadata in StatementExecutorTest""
3. ""Improve database connection mocking for StatementExecutorTest""
4. ""Add mocked DatabaseMetaData to StatementExecutorTest assertions""
5. ""Refactor mock connection creation in StatementExecutorTest to include DatabaseMetaData""
6. ""Update StatementExecutorTest to use a richer mock Connection object""
7. ""Extend StatementExecutorTest with mock DatabaseMetaData retrieval"" 

Choose one of the messages above that best represents the changes made to the test file.","```
test: mock connection and metadata in StatementExecutorTest

Ensure the assertExecuteQueryForSingleStatementSuccess test
mocks the Connection and DatabaseMetaData objects to provide
a more thorough simulation of the database interaction.
```",Improve mock connection setup in StatementExecutorTest,
"Here are the commit messages based on the changes in the two Java files:

1. SymbolTableCommand.java changes:
```
Refactor sorting of NList to use explicit Integer comparison

- Rewrote the lambda expression in the sorted() method call to use Integer.valueOf() for comparing string table indices.
- Improved readability by formatting multi-line stream operations.
```

2. DyldCacheLocalSymbolsInfo.java changes:
```
Update NList sorting method for consistent integer comparison

- Modified the comparator in the stream sorting to wrap values with Integer.valueOf(), ensuring consistent object comparison.
- Enhanced code formatting for the stream operation to improve legibility.
```

Each of these commit messages describes the purpose of the refactor (to use explicit Integer comparison) and mentions the secondary effect or intention (improved readability and code formatting). This gives other team members a comprehensive understanding of the changes and the reasons behind them.","```
refactor: improve string table index sorting to avoid integer overflow
```",Refactor sorting logic to prevent integer overflow in NList string table index comparison,
"Here are a couple of potential commit messages for the changes based on the context and assuming that this is the main purpose of the commit:

1. Annotate `drmInitData` as nullable in `MediaCodecVideoRenderer`
```
- Annotated `drmInitData` as `@Nullable` to reflect optional presence within `MediaCodecVideoRenderer`
- Refactored uses of `format.drmInitData` to `drmInitData` for consistent nullability checks
```

2. Improve nullability handling in DRM checks
```
- Incorporated nullability annotations for enhanced code clarity with DRM initialization data
- Simplified DRM support checks by using local variable `drmInitData` in conditional logic
```

These messages explain what was changed (""Annotated `drmInitData` as `@Nullable`"") and why (""to reflect optional presence within `MediaCodecVideoRenderer`"" / ""for enhanced code clarity with DRM initialization data""). They also highlight the change in the usage pattern from directly using `format.drmInitData` to using the local variable `drmInitData`.","```
fix: annotate drmInitData with @Nullable and refactor its usage in MediaCodecVideoRenderer
```",Annotate drmInitData with Nullable and refactor format.drmInitData usage,
"For the changes made in `GraalCompiler_old.java` to `GraalCompiler_new.java`:

```
Introduce DeadCodeEliminationPhase and fix typo in FrameStateAssignmentPhase in GraalCompiler
```

For the changes made in `FrameStateAssignmentPhase_old.java` to `FrameStateAssignmentPhase_new.java`:

```
Refactor typo in class and method names from FrameStateAssignement to FrameStateAssignment
```","```
fix(compiler): correct typos in FrameStateAssignmentPhase and add DeadCodeElimination
```",Fix typo in FrameStateAssignmentPhase and add DeadCodeEliminationPhase to compiler workflow,
"```
Add Nullable annotation to getImage method in CloseableAnimatedImage

- Imported javax.annotation.Nullable to mark getImage method as nullable.
- Adjusted the getImage method to return null when the CloseableAnimatedImage is closed, ensuring type safety with the Nullable annotation.
```","fix: add nullability annotation to CloseableAnimatedImage.getImage method

- Add the `@Nullable` annotation to the `getImage` method to indicate that it can return `null` when the `CloseableAnimatedImage` is closed.",Add Nullable annotation to getImage method in CloseableAnimatedImage,
"Based on the changes in the `Ec2DiscoveryITest` and `S3SnapshotRestoreTest` files, here are generated commit messages for each file:

**Commit message for Ec2DiscoveryITest:**
```
Enhance Ec2DiscoveryITest configuration with plugin loading and cluster settings

- Importing `PluginsService` class to enable plugin loading from the classpath.
- Adjusting `ClusterScope` to explicitly set `numClientNodes` and `transportClientRatio`.
- Modifying node startup setting to load plugins from the classpath.
- Updating the node creation method call from `cluster().startNode` to `internalCluster().startNode` to align with the latest testing utilities.
```

**Commit message for S3SnapshotRestoreTest:**
```
Refine S3SnapshotRestoreTest for improved cluster configuration and logging

- Import `PluginsService` for extended test plugin support.
- Include `numClientNodes` and `transportClientRatio` in `ClusterScope` to ensure the cluster configuration aligns with new testing standards.
- Adding plugin classpath loading setting in the overridden `nodeSettings` method.
- Replace `cluster().getInstance` with `internalCluster().getInstance` to use new test framework methods for getting instance settings.
- Update logger calls to use `internalCluster()` instead of `cluster()` for repository creation in multiple test methods.
- Amend retrieval of `AwsS3Service` and `AmazonS3` client instances to utilize the `internalCluster()` method.
- Modify the `cleanRepositoryFiles` method to use the `internalCluster().getInstance` for consistency with other test methods.
```

When summarizing diff changes in commit messages, it's important to provide context about the reason behind changes, how they affect the code, and which specific parts of the application they touch (e.g., testing, configuration, service startup).","```
feat: update Ec2DiscoveryITest and S3SnapshotRestoreTest to disallow client nodes and load plugins from classpath

- Set numClientNodes and transportClientRatio to 0 for cluster scopes in both tests
- Use internalCluster().startNode and internalCluster().getInstance methods
- Import PluginsService and set LOAD_PLUGIN_FROM_CLASSPATH to true
- Replace cluster(). with internalCluster(). for S3 client instances and settings access
```",Update Ec2DiscoveryITest and S3SnapshotRestoreTest with plugin loading and cluster configuration changes,
"Commit message:

```
Added empty `beforeHalt` method with `@Substitute` annotation for JDK9 compatibility

- Introduced a new method `beforeHalt` in `Target_java_lang_Shutdown` class to be used with JDK9 or later.
- The method is currently empty and is annotated with `@Substitute` and `@TargetElement` to specify its applicability.
- This change prepares the codebase for future enhancements related to VM shutdown behavior on JDK9+.
```

This commit message provides a concise summary of the change, including the context and purpose of the newly added method.",feat: add beforeHalt substitute method for JDK9 compatibility in Shutdown class,Add stub for beforeHalt method targeting JDK9 or later in Shutdown class,
"```
Optimize virtual file filtering logic by using stream's noneMatch method
```","```
fix(VirtualFile): optimize file inclusion check by using noneMatch
```",Optimize file filtering by using `noneMatch` in VirtualFile,
"
""Improve null safety for accumulator result retrieval in JobExecutionResult""","feat(JobExecutionResult): handle null accumulator results gracefully

Adds a check for a null accumulator result in the getAccumulatorResult method to prevent potential NullPointerException. Now returns null if the specified accumulator does not exist.",Handle null case in getAccumulatorResult method,
"Here are some suggestions for commit messages based on the given diff. Each commit message references the changes in the section of the code they were made.

Commit Message 1:
```
Add new array for tracking pending output stream switch times

- Added array `pendingOutputStreamSwitchTimesUs` to `MediaCodecVideoRenderer` class to handle output stream switch times alongside offsets.
- Initialized `pendingOutputStreamSwitchTimesUs` with the same length as `pendingOutputStreamOffsetsUs`.
- Updated constructor to initialize `pendingOutputStreamSwitchTimesUs` elements to `C.TIME_UNSET`.
```

Commit Message 2:
```
Introduce lastInputTimeUs to MediaCodecVideoRenderer

- Declared a new field `lastInputTimeUs` in `MediaCodecVideoRenderer` to store the timestamp of the last input buffer.
- Initialized `lastInputTimeUs` to `C.TIME_UNSET` during instance construction and on stream change/reset.
- Updated `onQueueInputBuffer` method to track the maximum timeUs of input buffers.
```

Commit Message 3:
```
Refine output buffer stream offset update logic

- Moved the logic for updating stream offset from `onQueueInputBuffer` to `onProcessedOutputBuffer`.
- The offset will now be updated based on `pendingOutputStreamSwitchTimesUs` alongside `pendingOutputStreamOffsetsUs`.
- Array copying is used to maintain pending output stream offset queues after updates.
```

Commit Message 4:
```
General maintenance and cleanup of MediaCodecVideoRenderer class

- Removed redundant duplicated output stream offset updates from `onQueueInputBuffer` method.
- Stream offset updating logic is now consolidated in `onProcessedOutputBuffer` to reduce complexity and potential errors.
```

Each commit message above describes a specific change and provides context for why it was made, making it clearer for other developers to understand the purpose of the changes when they browse the project's version history.","```
feat(MediaCodecVideoRenderer): track input buffer and output stream switch times

Add tracking of the last input buffer timestamp and store output stream switch times. Modify output buffer processing to sync with new timestamp tracking logic.
```",Add last input time tracking and update output stream offset logic,
"Commit Message 1:
```
Add regex pattern for ignorable SSL errors in SslHandler

A new regex pattern has been introduced to SslHandler for quickly identifying common ignorable SSL errors like connection resets, connection closed, and broken pipes. This update adds a case-insensitive check to handle various error messages efficiently.
```

Commit Message 2:
```
Enhance error handling to utilize regex for common network errors

In SslHandler, an optimization has been made to error handling by employing a regex match to swiftly detect connection reset and broken pipe errors. The change includes a conversion to lowercase for the error message to ensure consistent matching against the case-insensitive regex pattern.
```

Commit Message 3:
```
Refactor SSL exception handling for simplicity and efficiency

Within the SslHandler's ignoreException method, a refactoring effort simplifies the SSL exception detection process by first attempting a regex match for common error messages. The addition of a lowercasing step and regex check intends to bypass the more costly stack trace inspection when possible.
```

Commit Message 4:
```
Streamline the network exception classes check in SslHandler

The latest update to SslHandler streamlines the check for network exception classes, removing redundant references to Socket and DatagramSocket, as the instanceof operation already covers their subclasses like SocketChannel and DatagramChannel.
```","```
feat(SslHandler): add regex to identify ignorable IOExceptions

Implement a fast-path check using a regex to determine if an IOException
can be ignored, specifically targeting connection reset, connection closed,
and broken pipe errors, regardless of JDK implementation or OS differences.

This check enhances the existing logic that inspects stack traces for certain
classes to determine if an exception should be ignored.
```",Add regex check for common IO exceptions in SslHandler.ignoreException,
"Commit message for RegexpQueryBuilder changes:

```
Add exception handling for multiple fields in RegexpQueryBuilder

- Implement exception throw when multiple fields are provided to RegexpQueryBuilder
- Ensure that ParsingException is thrown with an appropriate error message indicating the unsupported use of multiple fields
```

Commit message for RegexpQueryBuilderTests changes:

```
Extend RegexpQueryBuilder tests to cover multi-field scenarios

- Add test case for verifying exception behavior when multiple fields are specified in RegexpQueryBuilder
- Ensure consistency in the error message with both long and short JSON input formats
```","```
feat: add exception for multiple fields in RegexpQueryBuilder

An exception is now thrown if multiple fields are specified in a RegexpQueryBuilder to ensure only a single field is used per query.
```",Add exception for multiple fields in RegexpQueryBuilder and corresponding test,
